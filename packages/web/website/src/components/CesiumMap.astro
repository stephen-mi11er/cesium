---
import type {RadarPoints} from "@cesium/core/models";
import DataQueries from "./handlers/dataQueries";

const dataQueries = new DataQueries();
const radarPoints: RadarPoints[] = await dataQueries.FlightPath();
---
<cesium-map id="cesiumContainer" data-access-token={import.meta.env.PUBLIC_CESIUM_ACCESS_TOKEN} data-radar-points={JSON.stringify(radarPoints)}/>

<script is:inline>
	class CesiumMap extends HTMLElement {
		constructor() {
			super();

			// Your access token can be found at: https://ion.cesium.com/tokens.
			// This is the default access token from your ion account
			Cesium.Ion.defaultAccessToken = this.dataset.accessToken;

			// Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.
			const viewer = new Cesium.Viewer('cesiumContainer', {
				terrain: Cesium.Terrain.fromWorldTerrain(),
			});

			// Fly the camera to San Francisco at the given longitude, latitude, and height.
			viewer.camera.flyTo({
				destination: Cesium.Cartesian3.fromDegrees(-122.4175, 37.655, 400),
				orientation: {
					heading: Cesium.Math.toRadians(0.0),
					pitch: Cesium.Math.toRadians(-15.0),
				}
			});

            // STEP 3 CODE (all points)
            // These are all the radar points from this flight.
            const flightData = JSON.parse(this.dataset.radarPoints);
            // Create a point for each.
            for (let i = 0; i < flightData.length; i++) {
                const dataPoint = flightData[i];

                viewer.entities.add({
                    description: `Location: (${dataPoint.longitude}, ${dataPoint.latitude}, ${dataPoint.height})`,
                    position: Cesium.Cartesian3.fromDegrees(dataPoint.longitude, dataPoint.latitude, dataPoint.height),
                    point: { pixelSize: 10, color: Cesium.Color.BLUE }
                });
            }

			async function load() {
				const buildingTileset = await Cesium.createOsmBuildingsAsync();
				viewer.scene.primitives.add(buildingTileset);
			}

			load();
		}
	}

	customElements.define('cesium-map', CesiumMap);
</script>

<style>

</style>
